/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
       
      ListNode dummy = new ListNode(0);
       ListNode current = dummy;
        
        if(l1==null && l2==null)
            return null;
        
         if(l1==null && l2!=null)
            return l2;
        
         if(l1!=null && l2==null)
            return l1;
      
        while(l1 != null && l2 != null)
        {
          if(l2.val >= l1.val)
        {
           ListNode temp = new ListNode(l1.val);
            current.next=temp;
            current=temp;
            l1=l1.next;
        }
        
        else
        {
             ListNode temp = new ListNode(l2.val);
             current.next=temp;
            current=temp;
            l2=l2.next;
        }
          
        }
        
        if(l1==null)
        {
            while(l2!=null)
            {
             ListNode temp = new ListNode(l2.val);
             current.next=temp;
             current=temp;
             l2=l2.next; 
            }
        }
        
        else if(l2==null)
        {
            while(l1 != null)
            {
                 ListNode temp = new ListNode(l1.val);
                 current.next=temp;
                 current=temp;
                 l1=l1.next;
            }
        }
        
        return dummy.next;
     
    }
}