class Solution {
    
   private void pickAndNonPick(int ind, int[] candidates, int target, List<List<Integer>> ans, List<Integer> ds) {
       
       if(ind==candidates.length)
       {
           if(target==0){
               ans.add(new ArrayList<>(ds));
           }
           return;
       }
       
       if(target>=candidates[ind]){
           ds.add(candidates[ind]);
           pickAndNonPick(ind,candidates,target-candidates[ind],ans,ds);
           ds.remove(ds.size()-1);
           
       }
       
       pickAndNonPick(ind+1,candidates,target,ans,ds);
       
        
    }
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        List<List<Integer>> ans = new ArrayList<>();
        int ind = 0;
        
        pickAndNonPick(ind,candidates,target,ans,new ArrayList<>());
        
        return ans;
        
    }
}