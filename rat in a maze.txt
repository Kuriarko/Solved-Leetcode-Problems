class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
       
       ArrayList<String> ans = new ArrayList<>();
       int[][] visited = new int[n][n];
       
       for(int i=0; i<n; i++)
       {
           for(int j=0; j<n; j++)
           {
               visited[i][j]=0;
           }
       }
       
       String move = "";
       
       if(m[0][0]==1)
       solve(0,0,move,m,visited,n,ans);
       
       return ans;
    }
    
    public static void solve(int i, int j, String move, int[][] m, int[][] visited, int n, ArrayList<String> ans)
    {
        if(i==n-1 && j==n-1)
        {
            ans.add(move);
            return;
        }
       
       //down
       if(i+1 < n && visited[i+1][j]==0 && m[i+1][j]==1)
       {
           visited[i][j]=1;
           solve(i+1,j, move + "D" ,m,visited,n,ans);
           visited[i][j]=0;
           
       }
       
       //left
       if(j-1>=0 && visited[i][j-1]==0 && m[i][j-1]==1 )
       {
           visited[i][j]=1;
           solve(i,j-1,move + "L" ,m,visited,n,ans);
           visited[i][j]=0;
       }
       
       //right
        if(j+1<n && visited[i][j+1]==0 && m[i][j+1]==1 )
       {
           visited[i][j]=1;
           solve(i,j+1,move + "R" ,m,visited,n,ans);
           visited[i][j]=0;
       }
       
       //up
           if(i-1>=0 && visited[i-1][j]==0 && m[i-1][j]==1 )
       {
           visited[i][j]=1;
           solve(i-1,j,move + "U" ,m,visited,n,ans);
           visited[i][j]=0;
       }
       
    }
}