class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        int index = 0;
       int[] res = new int[V];
       
       int[] visited = new int[V];
       Arrays.fill(visited,0);
       
       Stack<Integer> stk = new Stack<>();
       
       for(int i=0; i<V; i++)
       {
           if(visited[i] == 0)
           {
               dfsTopo(i,visited,adj,stk);
           }
       }
       
       while(stk.empty()== false)
       {
           int temp = stk.pop();
           
           res[index++] = temp;
       }
       
       return res;
       
    }
    
 static void dfsTopo(int node,int[] visited,ArrayList<ArrayList<Integer>> adj,Stack<Integer> stk)
    {
        visited[node] = 1;
        
        for(Integer n : adj.get(node))
        {
            if(visited[n] == 0){
                dfsTopo(node,visited,adj,stk);
            }
            
        }
        
        stk.push(node);
        