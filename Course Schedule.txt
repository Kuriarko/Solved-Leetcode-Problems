class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        int[] visited = new int[numCourses];
        
          ArrayList[] graph = new ArrayList[numCourses];
            for(int i=0;i<numCourses;i++)
                graph[i] = new ArrayList();
        
         for(int i=0; i<prerequisites.length;i++){
                graph[prerequisites[i][1]].add(prerequisites[i][0]);
            }
        
        for(int i=0; i<numCourses; i++)
        {
            if(visited[i] == 0)
            {
                if(cycleCheck(i,graph,visited) == true)return false;
            }
        }
        
        return true;
    }
    
    private boolean cycleCheck(int curr,ArrayList[] graph,int[] visited)
    {
        if(visited[curr] == 2)return true;
        
        visited[curr] = 2;
        
        for(int i=0; i < graph[curr].size(); i++)
        {
            if(visited[(int)graph[curr].get(i)] != 1)
            {
                if(cycleCheck((int)graph[curr].get(i),graph,visited) == true)
                    return true;
            }
        }
        
        visited[curr] = 1;
        return false;
        
    }
}