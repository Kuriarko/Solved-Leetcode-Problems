//Input: nums = [0,1,0]
//Output: 2
//Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.


//code
class Solution {
    public int findMaxLength(int[] nums) {
        int longest_subarray = 0, sum = 0;
        
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i=0; i < nums.length; i++)
        {
           sum = nums[i] == 1 ? sum + nums[i] : sum - 1;
           
            
            if(sum == 0){
                int zest = (i - 0 + 1);
                longest_subarray = Math.max(zest,longest_subarray);
                
            }
            
            if(!map.containsKey(sum)){
                map.put(sum,i);
            }
            else{
                int temp = i - map.get(sum);
                longest_subarray = Math.max(temp,longest_subarray);
            }
        }
        
        return longest_subarray;
        
    }
}