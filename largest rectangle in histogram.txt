class Solution {
    public int largestRectangleArea(int[] heights) {
        int max = 0;
        Stack<Integer> stk = new Stack<>();
        
        int[] left = new int[heights.length];
        int[] right = new int[heights.length];
        int[] area = new int[heights.length];
        
        for(int i=0; i<heights.length; i++)
        {
           while(stk.empty() == false && heights[stk.peek()] >= heights[i])
           {
               stk.pop();
           }
            
            if(stk.empty() == true)
                left[i] = 0;
            
            else{
                left[i] = stk.peek() + 1;
            }
            
            stk.push(i);
        }
        
        while(stk.empty() == false)
            stk.pop();
        
           for(int j=heights.length-1; j>=0; j--)
        {
           while(stk.empty() == false && heights[stk.peek()] >= heights[j])
           {
               stk.pop();
           }
            
            if(stk.empty() == true)
                right[j] = heights.length-1;
            
            else{
                right[j] = stk.peek() - 1;
            }
            
            stk.push(j);
        }
        
        for(int k=0; k<heights.length; k++)
        {
            area[k] = (right[k] - left[k] + 1) * heights[k];
            
            if(area[k] > max)
                max = area[k];
        }
        
        return max;
    }
}