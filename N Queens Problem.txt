class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        
        char[][] board = new char[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                board[i][j]= '.';
            }
        }
        
       nqueenUtil(0,board,res,n);
            
            
        return res;
    }
    
   public void nqueenUtil(int col, char[][]board, List<List<String>> res, int n)
    {
        
        if(col>=n){
            res.add(construct(board));
            return;
   
        }
        
        for(int i=0; i<n; i++)
        {
            if(isSafe(i,col,board,n))
            {
                board[i][col] = 'Q';
                
                nqueenUtil(col+1, board, res, n);
                 
                
                board[i][col]='.';
                
            }
            
           
        }
        
            
    }
    
   public List<String> construct(char[][] board){
       List<String> combo = new LinkedList<>();
       for(int i=0;i<board.length;i++)
       {
           combo.add(new String(board[i]));
       }
       
       return combo;
   }
    
   public boolean isSafe(int row, int col, char[][] board, int n)
    {
        int i,j;
        for(i=0; i<col; i++)
        {
            if(board[row][i]=='Q')
                return false;
        }
        
        for(i=row, j=col; i>=0 && j>=0; i--, j--)
        {
            if(board[i][j]=='Q')
                return false;
        }
        
        for(i=row, j=col; i<n && j>=0; i++, j--)
        {
             if(board[i][j]=='Q')
                return false;
            
        }
        
        return true;
    }
}