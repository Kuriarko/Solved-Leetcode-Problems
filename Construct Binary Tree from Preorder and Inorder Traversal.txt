class Solution {
     
    Map<Integer,Integer> map = new HashMap<>();
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        for(int i=0;i<inorder.length; i++)
        {
            map.put(inorder[i],i);
        }
        
        TreeNode tree = returnTree(preorder,inorder,0,preorder.length - 1,0);
        
        return tree;
    }
    
    public TreeNode returnTree(int[] preorder, int[] inorder, int inStrt, int inEnd, int preIndex)
    {  
        if(inStrt > inEnd || preIndex > preorder.length -1)return null;
        
        TreeNode root = new TreeNode(preorder[preIndex]);
        
     
        
        if(inStrt == inEnd)return root;
        
        int index = map.get(root.val);
        
        root.left = returnTree(preorder,inorder,inStrt,index-1,preIndex + 1);
        
        root.right = returnTree(preorder,inorder,index+1,inEnd, preIndex + index - inStrt +1);
        
        return root;
        
        
    }
}